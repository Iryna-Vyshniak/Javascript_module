Що про Javascript правда
З автоматичним керуванням пам'яттю
Інтерпретований
Мультипародигменний
Однопоточний

ECMAscript - Специфікація мови Javascript


--------------------------------------------


What is the difference between continuing and breaking a cycle?
continue skips the current value and break terminates the loop
continue пропускає поточне значення а break завершує цикл


За що відповідає третій параметр у методі splice
Очікує значення у разі заміни елемента

Для перебору масиву використовують for...in а для об'єкта for...of
f
------------------------------------------------------
У стрілочної функції є свій контекст
f

this в стрілочних функціях...
відсутній свій контекст, використовується зовнішній за місцем створення ф-ії

Чиста функція залежить від значення переданих аргументів
y

Що таке this?
посилання на контекст

Метод call приймає як аргумет
об'єкт та список арументів

------------------------------------------------

Функції, які посилаються на незалежні (вільні) змінні - це...
Замикання

Ключі властивостей це завжди...
рядок
------------------------------------------------

Скільки конструкторів може мати клас?
1

Статична функція може викликатися без створення екземпляра
y

Яким буде результат операції 10 + 20 + '30'?
'3030'

Якщо в операторі switch після case НЕ буде break, то
всі наступні блоки case будуть виконуватися один за іншим

Тернарний оператор це аналог …
оператора if else

синтаксично правильний запис інструкції з тернарним оператором.
const a = b || c ? b + c : b - c


Який метод об'єкта Math округлює значення до найближчого цілого?
Math.round(val)


Що буде результатом операції Number ('25px')?
NaN

Оператор while створює цикл який …
виконує блок коду, поки умова перевірки правдива

З яких частин складається цикл for?
ініціалізація, умова, тіло, пост-вираз


Навіщо використовується оператор break?
Для виходу з циклу в будь-який момент

Яким буде результат виразу true && 5 > 3 && "javascript"?
"Javascript"

true && 4 && "hello"
hello

true && 0 && "hello"
0

null || 2 || undefined
2


null || (2 && 3) || 4
3

"false" && "Манго" || null
"Манго"

Пріоритет оператора І && менше, ніж АБО || 
False
----------------------------------------------------------------------
Метод map змінює вихідний масив
f

__proto__ vs prototype

__proto__ и prototype це властивість об'єкту?
+

__proto__ є у всіх об'єктів?
+

Який тип властивісті __proto__?
object


звернення до змінної має сенс?


const ex = true;

console.log(ex.__proto__) +

const ex = "true";

console.log(ex.__proto__) +

const ex = 7;

console.log(ex.__proto__) +

t or f

const ex = 7;
const str = "str";

console.log(ex.__proto__ === str.__proto__) -


-------------------------------
const book = {
title: "The Last Kingdom" }
const clients = ["Mango ,"Ajax"];

console. log( clients. __proto__ === book.__proto__) -
--------------------------------
const book = {
title: "The Last Kingdom"}

const location = {
country: "Jamaica" ,
city: "Ocho Rios" 
}

console. log( location. __proto__ === book.__proto_) +
--------------------------------

function multiply( ) {}
const fn = function (){}

const arrowAdd = () => {}
class User {}


console. log( multiply. __proto__ !== fn.__proto__); -
console. log( arrowAdd. __proto__ !== User.__proto__) -

--------------------------------
Чи може стрілочна функція бути функцією-конструктором? -

--------------------------------

Об'єкт, який одночасно є класом/функцією-конструктором має prototype? +

--------------------------------
console. log( Object . prototype === Array. prototype) -

--------------------------------
function Component() { } ;
const newComponent = new Component( ) ;
console . log( newComponent._ proto_ === Component.prototype ) ; +

-------------------------------

const book = {
title: "The Last Kingdom" }


console. log( book.prototype); undefined

-----------------------------

Чи є в class User значення prototype? +

class User {
constructor (name) {
this.name = name;
hello() {
console.log(this.name);

const mango = new User( "Mango" );
console . log( User );
Чи є в class User значення proto? +

--------------------------------

console.log(Object.prototype.__proto__ ); null

--------------------------------

Чому дорівнює значення class User.__proto__? Function.prototype

class User {
constructor (name) {
this.name = name;
hello() {
console.log(this.name);

const mango = new User( "Mango" );
console. log(User.prototype.__proto__ === Object. prototype); TRUE

---------------------------------

При викликі методу об'єкта, це...
об'єкт, який є поточним контекстом виконання функції

Набір явно не пов'язаних функцій і змінних для зберігання та обробки
інформації - це...
Процедурне програмування

Що не створить новий об'єкт? const obj = hotel;

------------------------------------
Окремий представник класу, що має конкретний стан та
поведінка, що повністю визначається класом - це...
екземпляр

-------------------------------

Для перебору властивостей (ключів чи значень) об'єкта використовується цикл...
for...in

Що таке стек?
структура даних, працює за принципом останнім прийшов - першим вийшов

Внутрішня конструкція двигуна, яка містить всі контексти виконання
це:
Стек викликів

У процесі виконання функції значення змінних можуть змінюватися, що
відразу ж відображається в ...
лексичному оточенні

Значення за посиланням буде доступне після зміни об'єкта obj...
всім, хто має посилання


-------------------------------

arrays

Що повертає Array.prototype.forEach()?
Нічого не повертає, просто перебирає

Чи можна перервати виконання Array.prototype.forEach()?
False

Array.prototype.map() змінює оригінальний масив?
False

Array.prototype.map() повертає ...
Масив такої ж довжини

Навіщо використовується Array.prototype.map()?
для трансформації масив

Що повертає Array.prototype.filter()?
Новий масив (з елементами чи порожній)

Що повертає Array.prototype.find()?
Перший елемент, який задовільняє умову або undefined

Array.prototype.every() та Array.prototype.some() змінюють вихідний
масив?
не змінюють

Чи змінює оригінальний масив Array.prototype.sort()?
True
["A", "B", "a", "b"] default

[1000, 240, 670, 360, 89, 20] => [1000, 20, 240, 360, 670, 89]



