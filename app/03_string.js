const name = 'Valentyn';
const age = 23;
function getAge() {
  return age;
}

const output = '–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç ' + name + ' –∏ –º–æ–π –≤–æ–∑—Ä–∞—Å—Ç ' + age + ' –ª–µ—Ç.';
const output_1 = `–ü—Ä–∏–≤–µ—Ç, –º–µ–Ω—è –∑–æ–≤—É—Ç ${name} –∏ –º–æ–π –≤–æ–∑—Ä–∞—Å—Ç ${age < 30 ? 'A' : 'B'} –ª–µ—Ç.`;
const output_2 = `
  <div>This is div</div>
  <p>this is o</p>
`;

console.log(output);

const nameFirst = 'Valik';
console.log(nameFirst.length);
console.log(nameFirst.toUpperCase());
console.log(nameFirst.toLowerCase());
console.log(nameFirst.charAt(2));
console.log(nameFirst.indexOf('!'));
console.log(nameFirst.toLowerCase().startsWith('val'));
console.log(nameFirst.startsWith('Val'));
console.log(nameFirst.endsWith('ik!'));
console.log(nameFirst.repeat(3));
const string = '     password      ';
console.log(string.trim());
// console.log(string.trimLeft())
// console.log(string.trimRight())

function logPerson(s, name, age) {
  if (age < 0) {
    age = '–ï—â–µ –Ω–µ —Ä–æ–¥–∏–ª—Å—è';
  }
  return `${s[0]}${name}${s[1]}${age}${s[2]}`;
}

const personName = 'Valik';
const personName2 = 'Andrew';
const personAge = 23;
const personAge2 = -10;

const output_3 = logPerson`–ò–º—è: ${personName}, –í–æ–∑—Ä–∞—Å—Ç: ${personAge}!`;
const output_4 = logPerson`–ò–º—è: ${personName2}, –í–æ–∑—Ä–∞—Å—Ç: ${personAge2}!`;

console.log(output_3);
console.log(output_4);

// Write function RemoveExclamationMarks which removes all exclamation marks from a given string.
function removeExclamationMarks(s) {
  return s.split('!').join('');
}

//reverse string and omit all non-alphabetic characters. For str = "krishan", the output should be "nahsirk". For str = "ultr53o?n", the output should be "nortlu".

const reverseLetter = str =>
  str
    .replaceAll(/[^a-z–∞-—è—ë]/gi, '')
    .split('')
    //.filter(x => isNaN(x))
    .reverse()
    .join('');

console.log(reverseLetter('krishan')); // 'nahsirk'
console.log(reverseLetter('ultr53o?n')); // 'nortlu'
console.log(reverseLetter('ab23c')); // 'cba'
console.log(reverseLetter('krish21an')); // 'nahsirk'

// const str = '1. –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é JavaScript?';
// str = str.replace(/\s/g, '');
// const str = '2. –ö–∞–∫  —É–¥–∞–ª–∏—Ç—å  –¥–≤–æ–π–Ω—ã–µ  –ø—Ä–æ–±–µ–ª—ã  –∏–∑  —Å—Ç—Ä–æ–∫–∏  —Å  –ø–æ–º–æ—â—å—é  JavaScript?';
// str = str.replace(/\s+/g, ' ');
// const str = '3. –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –±—É–∫–≤—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é JavaScript?';
// str = str.replace(/[a-z–∞-—è—ë]/gi, '');
// const str = '4. –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –≤—Å—ë, –∫—Ä–æ–º–µ –±—É–∫–≤ —Å –ø–æ–º–æ—â—å—é JavaScript?';
// str = str.replace(/[^a-z–∞-—è—ë]/gi, '');
// const str = '5. –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –≤—Å—ë, –∫—Ä–æ–º–µ –±—É–∫–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é JavaScript?';
// str = str.replace(/[^a-z–∞-—è—ë\s]/gi, '');
// const str = '6. –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å —Ü–∏—Ñ—Ä—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é JavaScript?';
// str = str.replace(/[0-9]/g, '');
// const str = '7. –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é JavaScript?';
// str = str.replace(/[^0-9]/g, '');
// const str = '8. –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –≤—Å—ë, –∫—Ä–æ–º–µ 0123456789, . –∏ , –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é JavaScript?';
// str = str.replace(/[^0-9,.]/g, ' ');
// const str = '9. –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å –≤—Å—ë, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, –±—É–∫–≤ –∏ –ø—Ä–æ–±–µ–ª–æ–≤ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é JavaScript?';
// str = str.replace(/[^a-z–∞-—è—ë0-9\s]/gi, ' ');
// const str = '10. –ö–∞–∫ —É–¥–∞–ª–∏—Ç—å üòÄüòÉüòÑüòÅüòÜüòÖüòÇü§£üòá–∏–∑ —Å—Ç—Ä–æ–∫–∏ —Å –ø–æ–º–æ—â—å—é JavaScript?';
// str = str.replace(
//   /([\uE000-\uF8FF]|\uD83C[\uDC00-\uDFFF]|\uD83D[\uDC00-\uDFFF]|[\u2011-\u26FF]|\uD83[\uDD10-\uDDFF])/g,
//   ''
// );

// next variant
// –ú–µ—Ç–æ–¥ match() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—É—á–∏–≤—à–∏–µ—Å—è —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—Ä–æ–∫–∏ —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º. –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ array. –û–±—ä–µ–∫—Ç Array, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è, –∏–ª–∏ null, –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –±—ã–ª–æ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.
function reverseLetters(str) {
  return str.match(/[a-z]/gi).reverse().join('');
}

console.log(reverseLetters('krishan')); // 'nahsirk'
console.log(reverseLetters('ultr53o?n')); // 'nortlu'
console.log(reverseLetters('ab23c')); // 'cba'
console.log(reverseLetters('krish21an')); // 'nahsirk'

//Simple, remove the spaces from the string, then return the resultant string.
const noSpace = x => x.match(/[^\s]/gi).join('');

console.log(noSpace('8 j 8   mBliB8g  imjB8B8  jl  B')); // '8j8mBliB8gimjB8B8jlB'
console.log(noSpace('8 8 Bi fk8h B 8 BB8B B B  B888 c hl8 BhB fd')); //'88Bifk8hB8BB8BBBB888chl8BhBfd'
console.log(noSpace('8aaaaa dddd r     ')); // '8aaaaaddddr'

//next variant
function noSpaces(x) {
  return x.split(' ').join('');
}

//Write a function that will check if two given characters are the same case.
// If either of the characters is not a letter, return -1
// If both characters are the same case, return 1
// If both characters are letters, but not the same case, return 0
// Examples
// 'a' and 'g' returns 1
// 'A' and 'C' returns 1
// 'b' and 'G' returns 0
// 'B' and 'g' returns 0
// '0' and '?' returns -1
function sameCase(a, b) {
  if (a.match(/[a-z]/) && b.match(/[a-z]/)) {
    return 1;
  }
  if (a.match(/[A-Z]/) && b.match(/[A-Z]/)) {
    return 1;
  }
  if (b.match(/[a-z]/) && a.match(/[A-Z]/)) {
    return 0;
  }
  if (a.match(/[a-z]/) && b.match(/[A-Z]/)) {
    return 0;
  }
  return -1;
}

console.log(sameCase('a', 'g')); // 1
console.log(sameCase('A', 'C')); // 1
console.log(sameCase('b', 'G')); // 0
console.log(sameCase('B', 'g')); // 0
console.log(sameCase('0', '?')); // -1

//Return the number (count) of vowels in the given string.
// We will consider a, e, i, o, u as vowels for this Kata (but not y).
// The input string will only consist of lower case letters and/or spaces.

const getCount = str => str.replace(/[^aeiou]/g, '').length;
console.log(getCount('abracadabra')); // 5

//next variant
function getCounts(str) {
  return str.split('').filter(item => 'aeiou'.includes(item)).length;
}
console.log(getCounts('abracadabra')); // 5

//----------------------------------------------------------

// const ds = '–î–æ–±—Ä–∏–π –î–µ–Ω—å —Ç–∞ –î–æ–±—Ä–∏–π –í–µ—á—ñ—Ä';
// const ns = ds.replace(/^([^\s]+)(\s+)([^\s]+)/, '$3$2$1');
// alert(ns);

// let re = /(\w+)\s(\w+)/;
// let name = 'Jane Doe';
// let lastFirst = name.replace(re, '$2, $1');
// Doe, Jane

//–†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ /(\w+)\s(\w+)/ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –æ–¥–Ω–æ–º—É –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–æ–º —Å–∏–º–≤–æ–ª–∞–º —Å–ª–æ–≤–∞, –ø—Ä–æ–±—ñ–ª—É, –∞ –ø–æ—Ç—ñ–º –æ–¥–Ω–æ–º—É –∞–±–æ –¥–µ–∫—ñ–ª—å–∫–æ–º —Å–∏–º–≤–æ–ª–∞–º —Å–ª–æ–≤–∞. –Ü–Ω—à–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –≤—ñ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –±—É–¥—å-—è–∫–æ–º—É —Ä—è–¥–∫—É, —è–∫–∏–π –º—ñ—Å—Ç–∏—Ç—å —Å–ª–æ–≤–æ, –ø—Ä–æ–±—ñ–ª —Ç–∞ —ñ–Ω—à–µ —Å–ª–æ–≤–æ.

// –†–µ–≥—É–ª—è—Ä–Ω–∏–π –≤–∏—Ä–∞–∑ –º—ñ—Å—Ç–∏—Ç—å –¥–≤—ñ –≥—Ä—É–ø–∏ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è.
// –ü–µ—Ä—à–∞ –≥—Ä—É–ø–∞ –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è —Ñ—ñ–∫—Å—É—î –ø–µ—Ä—à–µ —Å–ª–æ–≤–æ, –∞ –¥—Ä—É–≥–∞ ‚Äì –¥—Ä—É–≥–µ —Å–ª–æ–≤–æ –ø—ñ—Å–ª—è –ø—Ä–æ–±—ñ–ª—É.

// –£ newSubstr –º–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ $1 –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–µ—Ä—à—É –≥—Ä—É–ø—É –∑–∞—Ö–æ–ø–ª–µ–Ω–Ω—è —Ç–∞ $2 –¥–ª—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –¥—Ä—É–≥—É. –©–æ–± –ø–æ–º—ñ–Ω—è—Ç–∏ —ñ–º‚Äô—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –º—ñ—Å—Ü—è–º–∏, –º–∏ —Å—Ç–∞–≤–∏–º–æ —Å–ø–æ—á–∞—Ç–∫—É –¥—Ä—É–≥–∏–π –∑–±—ñ–≥ ($2), –∞ –ø–æ—Ç—ñ–º –ø–µ—Ä—à–∏–π ($1).
