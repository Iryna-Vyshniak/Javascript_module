// - Classes are in fact "special functions"
// - class can be defined in two ways: a class expression or a class declaration.

/*
 * - announcement - –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
 * - constructor - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
 * - methods - –º–µ—Ç–æ–¥–∏
 * - static - static
 * - private properties - –ø—Ä–∏–≤–∞—Ç–Ω—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ
 * - Syntax of public properties and class methods - —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –ø—É–±–ª—ñ—á–Ω–∏—Ö –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ —Ç–∞ –º–µ—Ç–æ–¥–∏ –∫–ª–∞—Å—ñ–≤
 * - getters and setters - –≥–µ—Ç–µ—Ä–∏ —Ç–∞ —Å–µ—Ç–µ—Ä–∏
 */

// Declaration
class Rectangle {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }
}

// Expression; the class is anonymous but assigned to a variable
const RectangleA = class {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }
};

// Expression; the class has its own name
const RectangleB = class RectangleB2 {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }
};

// CLASS CAR
class Car {
  static description = `It's car's description`;

  constructor({ brand, model, price } = {}) {
    this.brand = brand;
    this._model = model;
    this._price = price;
  }

  get price() {
    return this._price;
  }

  set price(newPrice) {
    this._price = newPrice;
  }

  get model() {
    return this._model;
  }

  set model(newModel) {
    this._model = newModel;
  }
}

const carInstance = new Car({
  brand: 'Audi',
  model: 'Q3',
  price: 45000,
});

console.log('üöÄ ~ file: 12-classes.js:67 ~ carInstance', carInstance);
// Car {brand: 'Audi', _model: 'Q3', price: 45000}
// brand: "Audi"
// price: 45000
// _model:"Q3"
// model: "Q3"

console.log(carInstance.model); //Q3

carInstance.model = 'X4';
console.log(carInstance.model); //X4

console.log(carInstance.price); //45000 getter

carInstance.price = 58000; // setter
console.log(carInstance.price); //58000 getter

// ====================================================================
// HEROES

// EXTENDS
// SUPER ()

class Hero {
  constructor({ name = 'hero', xp = 0 } = {}) {
    this.name = name;
    this.xp = xp;
  }

  gainXp(amount) {
    console.log(`${this.name} –ø–æ–ª—É—á–∞–µ—Ç ${amount} –æ–ø—ã—Ç–∞`);
    this.xp += amount;
  }
}

class Warrior extends Hero {
  constructor({ weapon, ...restProps } = {}) {
    super(restProps);

    this.weapon = weapon;
  }

  attack() {
    console.log(`${this.name} –∞—Ç–∞–∫—É–µ—Ç –∏—Å–ø–æ–ª—å–∑—É—è ${this.weapon}`);
  }
}

class Berserk extends Warrior {
  constructor({ warcry, ...restProps } = {}) {
    super(restProps);

    this.warcry = warcry;
  }

  babyRage() {
    console.log(this.warcry);
  }
}

const ajax = new Berserk({
  name: 'ajax',
  xp: 500,
  weapon: 'axe',
  warcry: 'waaaaaaaah',
});

console.log(ajax);

// ajax.babyRage();
// ajax.attack();
// ajax.gainXp();

class Mage extends Hero {
  constructor({ spells, ...restProps } = {}) {
    super(restProps);

    this.spells = spells;
  }

  cast() {
    console.log(`${this.name} —á—Ç–æ-—Ç–æ —Ç–∞–º –∫–∞—Å—Ç—É–µ—Ç üßô‚Äç‚ôÇÔ∏è`);
  }
}

const mango = new Warrior({ name: 'mango', xp: 1000, weapon: '–∞–ª–µ–±–∞—Ä–¥–∞' });
console.log(mango);
mango.attack();
mango.gainXp(1000);

// console.log(
//     'mango.__proto__ === Warrior.prototype ',
//     mango.__proto__ === Warrior.prototype,
// );
//  console.log(Object.getPrototypeOf(mango) === Warrior.prototype);

// console.log(
//     'Warrior.prototype.__proto__ === Hero.prototype ',
//     Warrior.prototype.__proto__ === Hero.prototype,
// );

// console.log(
//     'Hero.prototype.__proto__ === Object.prototype ',
//     Hero.prototype.__proto__ === Object.prototype,
// );

//--------------------------------------------------------------------

class User {
  // –°–∏–Ω—Ç–∞–∫—Å–∏—Å –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –º–µ—Ç–æ–¥—É –∫–ª–∞—Å—É
  constructor(name, email) {
    // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç–µ–π –µ–∫–∑–µ–º–ø–ª—è—Ä–∞, public value: name, email
    this.name = name;
    this.email = email;
  }
}

const mangust = new User('Mangust', 'mango@mail.com');
console.log(mangust); // { name: 'Mangust', email: 'mango@mail.com' }

const poly = new User('Poly', 'poly@mail.com');
console.log(poly); // { name: 'Poly', email: 'poly@mail.com' }

//---------------------------------------------------------------------
class User {
  // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑—É—î–º–æ –æ–±'—î–∫—Ç
  // constructor({ name, email }) - —Å–∏–≥–Ω–∞—Ç—É—Äa (–ø—ñ–¥–ø–∏—Å) –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞.
  constructor({ name, email }) {
    this.name = name;
    this.email = email;
  }
}

const mall = new User({
  name: 'Mall',
  email: 'mall@mail.com',
});
console.log(mall); // { name: "Mall", email: "mall@mail.com" }

const magicman = new User({
  name: 'Magicman',
  email: 'mag@mail.com',
});
console.log(poly); // { name: "Magicman", email: "mag@mail.com" }

//------------------------------------------------------------------
